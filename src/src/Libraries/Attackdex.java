package src.Libraries;

import java.util.HashMap;
import java.util.Random;

import src.Constructors.BattleFrame;

public class Attackdex {
	public static void main(String[]args) {
		
	}
	public static int[] Identify(String key){
		int[] p = new int[24];
	HashMap <String, int[]> map = new HashMap<>();
	map.put("10,000,000VoltThunderbolt", new int[]{4,1 ,1 ,195 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Absorb", new int[]{10,1 ,15 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Accelerock", new int[]{16,0 ,20 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Acid", new int[]{14,1 ,30 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,10 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("AcidArmor", new int[]{14,-1 ,20 ,-99 ,-99 ,0 ,0 , -2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("AcidDownpour", new int[]{14,0 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("AcidDownpour", new int[]{14,1 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("AcidSpray", new int[]{14,1 ,20 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,257 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Acrobatics", new int[]{8,0 ,15 ,55 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Acupressure", new int[]{13,-1 ,30 ,-99 ,-99 ,0 ,-2 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("AerialAce", new int[]{8,0 ,20 ,60 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Aeroblast", new int[]{8,1 ,5 ,100 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("AfterYou", new int[]{13,-1 ,15 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Agility", new int[]{15,-1 ,30 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,-2 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("AirCutter", new int[]{8,1 ,25 ,60 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("AirSlash", new int[]{8,1 ,15 ,75 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("All-OutPummeling", new int[]{6,0 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("All-OutPummeling", new int[]{6,1 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("AllySwitch", new int[]{15,-1 ,15 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Amnesia", new int[]{15,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,-2 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("AnchorShot", new int[]{17,0 ,20 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("AncientPower", new int[]{16,1 ,5 ,60 ,100 ,0 ,-10 , -10 ,-10 ,-10 ,-10 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("AquaJet", new int[]{18,0 ,20 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("AquaRing", new int[]{18,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("AquaTail", new int[]{18,0 ,10 ,90 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ArmThrust", new int[]{6,0 ,20 ,15 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Aromatherapy", new int[]{10,-1 ,5 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("AromaticMist", new int[]{5,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,-1 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Assist", new int[]{13,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Assurance", new int[]{2,0 ,10 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Astonish", new int[]{9,0 ,15 ,30 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("AttackOrder", new int[]{1,0 ,15 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Attract", new int[]{13,-1 ,15 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("AuraSphere", new int[]{6,1 ,20 ,80 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Auroraeil", new int[]{12,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("AuroraBeam", new int[]{12,1 ,20 ,65 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,10 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Autotomize", new int[]{17,-1 ,15 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,-2 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Avalanche", new int[]{12,0 ,10 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Baby-DollEyes", new int[]{5,-1 ,30 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,100 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BaddyBad", new int[]{2,1 ,15 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BanefulBunker", new int[]{14,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Barrage", new int[]{13,0 ,20 ,15 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Barrier", new int[]{15,-1 ,20 ,-99 ,-99 ,0 ,-2 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BatonPass", new int[]{13,-1 ,40 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BeakBlast", new int[]{8,0 ,15 ,100 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,100 ,0 ,0 ,1 });
	map.put("BeatUp", new int[]{2,0 ,10 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Belch", new int[]{14,1 ,10 ,120 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BellyDrum", new int[]{13,-1 ,10 ,-99 ,-99 ,0 ,-6 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Bestow", new int[]{13,-1 ,15 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Bide", new int[]{13,0 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Bind", new int[]{13,0 ,20 ,15 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Bite", new int[]{2,0 ,25 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BlackHoleEclipse", new int[]{2,0 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BlackHoleEclipse", new int[]{2,1 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BlastBurn", new int[]{7,1 ,5 ,150 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BlazeKick", new int[]{7,0 ,10 ,85 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,10 ,0 ,0 ,1 });
	map.put("Blizzard", new int[]{12,1 ,5 ,110 ,70 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,10 ,0 ,1 });
	map.put("Block", new int[]{13,-1 ,5 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BloomDoom", new int[]{10,0 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BloomDoom", new int[]{10,1 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BlueFlare", new int[]{7,1 ,5 ,130 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,20 ,0 ,0 ,1 });
	map.put("BodySlam", new int[]{13,0 ,15 ,85 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,30 ,0 ,0 ,0 ,1 });
	map.put("BoltStrike", new int[]{4,0 ,5 ,130 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,20 ,0 ,0 ,0 ,1 });
	map.put("BoneClub", new int[]{11,0 ,20 ,65 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BoneRush", new int[]{11,0 ,10 ,25 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Bonemerang", new int[]{11,0 ,10 ,50 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Boomburst", new int[]{13,1 ,10 ,140 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Bounce", new int[]{8,0 ,5 ,85 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,30 ,0 ,0 ,0 ,1 });
	map.put("BouncyBubble", new int[]{18,1 ,15 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BraveBird", new int[]{8,0 ,15 ,120 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BreakneckBlitz", new int[]{13,0 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BreakneckBlitz", new int[]{13,1 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BrickBreak", new int[]{6,0 ,15 ,75 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Brine", new int[]{18,1 ,10 ,65 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BrutalSwing", new int[]{2,0 ,20 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Bubble", new int[]{18,1 ,30 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,10 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BubbleBeam", new int[]{18,1 ,20 ,65 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,10 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BugBite", new int[]{1,0 ,20 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BugBuzz", new int[]{1,1 ,10 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,10 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BulkUp", new int[]{6,-1 ,20 ,-99 ,-99 ,0 ,-1 , -1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Bulldoze", new int[]{11,0 ,20 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,100 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BulletPunch", new int[]{17,0 ,30 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BulletSeed", new int[]{10,0 ,30 ,25 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BurnUp", new int[]{7,1 ,5 ,130 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("BuzzyBuzz", new int[]{4,1 ,15 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,100 ,0 ,0 ,0 ,1 });
	map.put("CalmMind", new int[]{15,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,-1 ,-1 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Camouflage", new int[]{13,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Captivate", new int[]{13,-1 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,257 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Catastropika", new int[]{4,0 ,1 ,210 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Celebrate", new int[]{13,-1 ,40 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Charge", new int[]{4,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,-1 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ChargeBeam", new int[]{4,1 ,10 ,50 ,90 ,0 ,0 , 0 ,-70 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Charm", new int[]{5,-1 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,257 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Chatter", new int[]{8,1 ,20 ,65 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ChipAway", new int[]{13,0 ,20 ,70 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("CircleThrow", new int[]{6,0 ,10 ,60 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Clamp", new int[]{18,0 ,15 ,35 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ClangingScales", new int[]{3,1 ,5 ,110 ,100 ,0 ,0 , 1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ClangorousSoulblaze", new int[]{3,1 ,1 ,185 ,-99 ,0 ,-1 , -1 ,-1 ,-1 ,-1 ,-1 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ClearSmog", new int[]{14,1 ,15 ,50 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("CloseCombat", new int[]{6,0 ,5 ,120 ,100 ,0 ,0 , 1 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Coil", new int[]{14,-1 ,20 ,-99 ,-99 ,0 ,-1 , -1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("CometPunch", new int[]{13,0 ,15 ,18 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Confide", new int[]{13,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ConfuseRay", new int[]{9,-1 ,10 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Confusion", new int[]{15,1 ,25 ,50 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Constrict", new int[]{13,0 ,35 ,10 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,10 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ContinentalCrush", new int[]{16,0 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ContinentalCrush", new int[]{16,1 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Conversion", new int[]{13,-1 ,30 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Conversion2", new int[]{13,-1 ,30 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Copycat", new int[]{13,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("CoreEnforcer", new int[]{3,1 ,10 ,100 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("CorkscrewCrash", new int[]{17,0 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("CorkscrewCrash", new int[]{17,1 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("CosmicPower", new int[]{15,-1 ,20 ,0 ,0 ,-1 ,0 , -1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,1 ,1 ,117 });
	map.put("CottonSpore", new int[]{10,-1 ,40 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,257 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Counter", new int[]{6,0 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Covet", new int[]{13,0 ,25 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Crabhammer", new int[]{18,0 ,10 ,100 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("CraftyShield", new int[]{5,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("CrossChop", new int[]{6,0 ,5 ,100 ,80 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("CrossPoison", new int[]{14,0 ,20 ,70 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 10 ,0 ,0 ,0 ,0 ,1 });
	map.put("Crunch", new int[]{2,0 ,15 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,20 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("CrushClaw", new int[]{13,0 ,10 ,75 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,50 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("CrushGrip", new int[]{13,0 ,5 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Curse", new int[]{9,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Cut", new int[]{13,0 ,30 ,50 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DarkVoid", new int[]{2,-1 ,10 ,-99 ,50 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,100 ,1 });
	map.put("DarkPulse", new int[]{2,1 ,15 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DarkestLariat", new int[]{2,0 ,10 ,85 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DazzlingGleam", new int[]{5,1 ,10 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DefendOrder", new int[]{1,-1 ,10 ,-99 ,-99 ,0 ,0 , -1 ,0 ,-1 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DefenseCurl", new int[]{13,-1 ,40 ,-99 ,-99 ,0 ,0 , -1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Defog", new int[]{8,-1 ,15 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DestinyBond", new int[]{9,-1 ,5 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Detect", new int[]{6,-1 ,5 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DevastatingDrake", new int[]{3,0 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DevastatingDrake", new int[]{3,1 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DiamondStorm", new int[]{16,0 ,5 ,100 ,95 ,0 ,0 , -50 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Dig", new int[]{11,0 ,10 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Disable", new int[]{13,-1 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DisarmingVoice", new int[]{5,1 ,15 ,40 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Discharge", new int[]{4,1 ,15 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,30 ,0 ,0 ,0 ,1 });
	map.put("Dive", new int[]{18,0 ,10 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DizzyPunch", new int[]{13,0 ,10 ,70 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DoomDesire", new int[]{17,1 ,5 ,140 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DoubleIronBash", new int[]{17,0 ,5 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DoubleHit", new int[]{13,0 ,10 ,35 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DoubleKick", new int[]{6,0 ,30 ,30 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DoubleSlap", new int[]{13,0 ,10 ,15 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DoubleTeam", new int[]{13,-1 ,15 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Double-Edge", new int[]{13,0 ,15 ,120 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DracoMeteor", new int[]{3,1 ,5 ,130 ,90 ,0 ,0 , 0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DragonAscent", new int[]{8,0 ,5 ,120 ,100 ,0 ,0 , 1 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DragonBreath", new int[]{3,1 ,20 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,30 ,0 ,0 ,0 ,1 });
	map.put("DragonClaw", new int[]{3,0 ,15 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DragonDance", new int[]{3,-1 ,20 ,-99 ,-99 ,0 ,-1 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DragonHammer", new int[]{3,0 ,15 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DragonPulse", new int[]{3,1 ,10 ,85 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DragonRage", new int[]{3,1 ,10 ,100 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,1 ,1 });
	map.put("DragonRush", new int[]{3,0 ,10 ,100 ,75 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DragonTail", new int[]{3,0 ,10 ,60 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DrainPunch", new int[]{6,0 ,10 ,75 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DrainingKiss", new int[]{5,1 ,10 ,50 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DreamEater", new int[]{15,1 ,15 ,100 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DrillPeck", new int[]{8,0 ,20 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DrillRun", new int[]{11,0 ,10 ,80 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DualChop", new int[]{3,0 ,15 ,40 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("DynamicPunch", new int[]{6,0 ,5 ,100 ,50 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("EarthPower", new int[]{11,1 ,10 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Earthquake", new int[]{11,0 ,10 ,100 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Echoedoice", new int[]{13,1 ,15 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("EerieImpulse", new int[]{4,-1 ,15 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,257 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("eeveeolley", new int[]{13,0 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("EggBomb", new int[]{13,0 ,10 ,100 ,75 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ElectricTerrain4", new int[]{-1,10 ,-99 ,-99 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,1 ,1 });
	map.put("Electrify", new int[]{4,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ElectroBall", new int[]{4,1 ,10 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Electroweb", new int[]{4,1 ,15 ,55 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,100 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Embargo", new int[]{2,-1 ,15 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Ember", new int[]{7,1 ,25 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,10 ,0 ,0 ,1 });
	map.put("Encore", new int[]{13,-1 ,5 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Endeavor", new int[]{13,0 ,5 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Endure", new int[]{13,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("EnergyBall", new int[]{10,1 ,10 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,10 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Entrainment", new int[]{13,-1 ,15 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Eruption", new int[]{7,1 ,5 ,150 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Explosion", new int[]{13,0 ,5 ,250 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Extrasensory", new int[]{15,1 ,20 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ExtremeEvoboost", new int[]{13,-1 ,1 ,-99 ,-99 ,0 ,-2 , -2 ,-2 ,-2 ,-2 ,-2 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ExtremeSpeed", new int[]{13,0 ,5 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Facade", new int[]{13,0 ,20 ,70 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FairyLock", new int[]{5,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FairyWind", new int[]{5,1 ,30 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FakeOut", new int[]{13,0 ,10 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FakeTears", new int[]{2,-1 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,257 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FalseSwipe", new int[]{13,0 ,40 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FeatherDance", new int[]{8,-1 ,15 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,257 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Feint", new int[]{13,0 ,10 ,30 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FeintAttack", new int[]{2,0 ,20 ,60 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FellStinger", new int[]{1,0 ,25 ,50 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FieryDance", new int[]{7,1 ,10 ,80 ,100 ,0 ,0 , 0 ,-50 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FinalGambit", new int[]{6,1 ,5 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FireBlast", new int[]{7,1 ,5 ,110 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,10 ,0 ,0 ,1 });
	map.put("FireFang", new int[]{7,0 ,15 ,65 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,10 ,0 ,0 ,1 });
	map.put("FireLash", new int[]{7,0 ,15 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,100 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FirePledge", new int[]{7,1 ,10 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("firePunch", new int[]{7,0 ,15 ,75 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,10 ,0 ,0 ,1 });
	map.put("FireSpin", new int[]{7,1 ,15 ,35 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Firstmpression", new int[]{1,0 ,10 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Fissure", new int[]{11,0 ,5 ,2147483647 ,20 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Flail", new int[]{13,0 ,15 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FlameBurst", new int[]{7,1 ,15 ,70 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FlameCharge", new int[]{7,0 ,20 ,50 ,100 ,0 ,0 , 0 ,0 ,0 ,-1 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FlameWheel", new int[]{7,0 ,25 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,10 ,0 ,0 ,1 });
	map.put("Flamethrower", new int[]{7,1 ,15 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,10 ,0 ,0 ,1 });
	map.put("FlareBlitz", new int[]{7,0 ,15 ,120 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,10 ,0 ,0 ,1 });
	map.put("Flash", new int[]{13,-1 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FlashCannon", new int[]{17,1 ,10 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,10 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Flatter", new int[]{2,-1 ,15 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,-100 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FleurCannon", new int[]{5,1 ,5 ,130 ,90 ,0 ,0 , 0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Fling", new int[]{2,0 ,10 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FloatyFall", new int[]{8,0 ,15 ,90 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FloralHealing", new int[]{5,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FlowerShield", new int[]{5,-1 ,10 ,-99 ,-99 ,0 ,0 , -1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Fly", new int[]{8,0 ,15 ,90 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FlyingPress", new int[]{6,0 ,10 ,100 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FocusBlast", new int[]{6,1 ,5 ,120 ,70 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,10 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FocusEnergy", new int[]{13,-1 ,30 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FocusPunch", new int[]{6,0 ,20 ,150 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FollowMe", new int[]{13,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ForcePalm", new int[]{6,0 ,10 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,30 ,0 ,0 ,0 ,1 });
	map.put("Foresight", new int[]{13,-1 ,40 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Forest'sCurse", new int[]{10,-1 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FoulPlay", new int[]{2,0 ,15 ,95 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FreezeShock", new int[]{12,0 ,5 ,140 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,30 ,0 ,0 ,0 ,1 });
	map.put("Freeze-Dry", new int[]{12,1 ,20 ,70 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,10 ,0 ,1 });
	map.put("FreezyFrost", new int[]{12,1 ,15 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FrenzyPlant", new int[]{10,1 ,5 ,150 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FrostBreath", new int[]{12,1 ,10 ,60 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Frustration", new int[]{13,0 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FuryAttack", new int[]{13,0 ,20 ,15 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FuryCutter", new int[]{1,0 ,20 ,40 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FurySwipes", new int[]{13,0 ,15 ,18 ,80 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FusionBolt", new int[]{4,0 ,5 ,100 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FusionFlare", new int[]{7,1 ,5 ,100 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("FutureSight", new int[]{15,1 ,10 ,120 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("GastroAcid", new int[]{14,-1 ,10 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("GearGrind", new int[]{17,0 ,15 ,50 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("GearUp", new int[]{17,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("GenesisSupernova", new int[]{15,1 ,1 ,185 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Geomancy", new int[]{5,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,-2 ,-2 ,-2 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("GigaDrain", new int[]{10,1 ,10 ,75 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("GigaImpact", new int[]{13,0 ,5 ,150 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("GigavoltHavoc", new int[]{4,0 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("GigavoltHavoc", new int[]{4,1 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Glaciate", new int[]{12,1 ,10 ,65 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,100 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Glare", new int[]{13,-1 ,30 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,100 ,0 ,0 ,0 ,1 });
	map.put("GlitzyGlow", new int[]{15,1 ,15 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("GrassKnot", new int[]{10,1 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("GrassPledge", new int[]{10,1 ,10 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("GrassWhistle", new int[]{10,-1 ,15 ,-99 ,55 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,100 ,1 });
	map.put("GrassyTerrain", new int[]{10,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Gravity", new int[]{15,-1 ,5 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Growl", new int[]{13,-1 ,40 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,257 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Growth", new int[]{13,-1 ,20 ,-99 ,-99 ,0 ,-1 , 0 ,-1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Grudge", new int[]{9,-1 ,5 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("GuardSplit", new int[]{15,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("GuardSwap", new int[]{15,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("GuardianofAlola", new int[]{5,1 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Guillotine", new int[]{13,0 ,5 ,2147483647 ,20 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("GunkShot", new int[]{14,0 ,5 ,120 ,80 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Gust", new int[]{8,1 ,35 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("GyroBall", new int[]{17,0 ,5 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Hail", new int[]{12,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HammerArm", new int[]{6,0 ,10 ,100 ,90 ,0 ,0 , 0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HappyHour", new int[]{13,-1 ,30 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Harden", new int[]{13,-1 ,30 ,-99 ,-99 ,0 ,0 , -1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Haze", new int[]{12,-1 ,30 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HeadCharge", new int[]{13,0 ,15 ,120 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HeadSmash", new int[]{16,0 ,5 ,150 ,80 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Headbutt", new int[]{13,0 ,15 ,70 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HealBell", new int[]{13,-1 ,5 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HealBlock", new int[]{15,-1 ,15 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HealOrder", new int[]{1,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HealPulse", new int[]{15,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HealingWish", new int[]{15,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HeartStamp", new int[]{15,0 ,25 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HeartSwap", new int[]{15,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HeatCrash", new int[]{7,0 ,10 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HeatWave", new int[]{7,1 ,10 ,95 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,10 ,0 ,0 ,1 });
	map.put("HeavySlam", new int[]{17,0 ,10 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HelpingHand", new int[]{13,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Hex", new int[]{9,1 ,10 ,65 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HiddenPower", new int[]{13,1 ,15 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HighHorsepower", new int[]{11,0 ,10 ,95 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HighJumpKick", new int[]{6,0 ,10 ,130 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HoldBack", new int[]{13,0 ,40 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HoldHands", new int[]{13,-1 ,40 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HoneClaws", new int[]{2,-1 ,15 ,-99 ,-99 ,0 ,-1 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HornAttack", new int[]{13,0 ,25 ,65 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HornDrill", new int[]{13,0 ,5 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HornLeech", new int[]{10,0 ,10 ,75 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Howl", new int[]{13,-1 ,40 ,-99 ,-99 ,0 ,-1 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Hurricane", new int[]{8,1 ,10 ,110 ,70 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HydroVortex", new int[]{18,0 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HydroVortex", new int[]{18,1 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HydroCannon", new int[]{18,1 ,5 ,150 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HydroPump", new int[]{18,1 ,5 ,110 ,80 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HyperVoice", new int[]{13,1 ,10 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HyperBeam", new int[]{13,1 ,5 ,150 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HyperFang", new int[]{13,0 ,15 ,80 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HyperspaceFury", new int[]{2,0 ,5 ,100 ,-99 ,0 ,0 , 1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("HyperspaceHole", new int[]{15,1 ,5 ,80 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Hypnosis", new int[]{15,-1 ,20 ,-99 ,60 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,100 ,1 });
	map.put("IceBall", new int[]{12,0 ,20 ,30 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("iceBeam", new int[]{12,1 ,10 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,10 ,0 ,1 });
	map.put("IceBurn", new int[]{12,1 ,5 ,140 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,30 ,0 ,0 ,1 });
	map.put("IceFang", new int[]{12,0 ,15 ,65 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,10 ,0 ,1 });
	map.put("IceHammer", new int[]{12,0 ,10 ,100 ,90 ,0 ,0 , 0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("icePunch", new int[]{12,0 ,15 ,75 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,10 ,0 ,1 });
	map.put("IceShard", new int[]{12,0 ,30 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("IcicleCrash", new int[]{12,0 ,10 ,85 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("IcicleSpear", new int[]{12,0 ,30 ,25 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("IcyWind", new int[]{12,1 ,15 ,55 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,100 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Imprison", new int[]{15,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Incinerate", new int[]{7,1 ,15 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Inferno", new int[]{7,1 ,5 ,100 ,50 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,100 ,0 ,0 ,1 });
	map.put("Ingrain", new int[]{10,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("IonDeluge", new int[]{4,-1 ,25 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("IronDefense", new int[]{17,-1 ,15 ,-99 ,-99 ,0 ,0 , -2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("IronHead", new int[]{17,0 ,15 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("IronTail", new int[]{17,0 ,15 ,100 ,75 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,30 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("VitalThrow", new int[]{6,0 ,10 ,70 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Judgment", new int[]{13,1 ,10 ,100 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("JumpKick", new int[]{6,0 ,10 ,100 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("KarateChop", new int[]{6,0 ,25 ,50 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Kinesis", new int[]{15,-1 ,15 ,-99 ,80 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("King'sShield", new int[]{17,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,100 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("KnockOff", new int[]{2,0 ,20 ,65 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Land'sWrath", new int[]{11,0 ,10 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("LaserFocus", new int[]{13,-1 ,30 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("LastResort", new int[]{13,0 ,5 ,140 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("LavaPlume", new int[]{7,1 ,15 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,30 ,0 ,0 ,1 });
	map.put("LeafBlade", new int[]{10,0 ,15 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("LeafStorm", new int[]{10,1 ,5 ,130 ,90 ,0 ,0 , 0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("LeafTornado", new int[]{10,1 ,10 ,65 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Leafage", new int[]{10,0 ,40 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("LeechLife", new int[]{1,0 ,10 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("LeechSeed", new int[]{10,-1 ,10 ,-99 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Leer", new int[]{13,-1 ,30 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,100 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Let'sSnuggleForever", new int[]{5,0 ,1 ,190 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Lick", new int[]{9,0 ,30 ,30 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,30 ,0 ,0 ,0 ,1 });
	map.put("LightofRuin", new int[]{5,1 ,5 ,140 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("LightScreen", new int[]{15,-1 ,30 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("LightThatBurnstheSky", new int[]{15,1 ,1 ,200 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Liquidation", new int[]{18,0 ,10 ,85 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,20 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Lock-On", new int[]{13,-1 ,5 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("LovelyKiss", new int[]{13,-1 ,10 ,-99 ,75 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,100 ,1 });
	map.put("LowKick", new int[]{6,0 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("LowSweep", new int[]{6,0 ,20 ,65 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,100 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("LuckyChant", new int[]{13,-1 ,30 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("LunarDance", new int[]{15,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Lunge", new int[]{1,0 ,15 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,100 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("LusterPurge", new int[]{15,1 ,5 ,70 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,50 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MachPunch", new int[]{6,0 ,30 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MagicCoat", new int[]{15,-1 ,15 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MagicRoom", new int[]{15,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MagicalLeaf", new int[]{10,1 ,20 ,60 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MagmaStorm", new int[]{7,1 ,5 ,100 ,75 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MagnetBomb", new int[]{17,0 ,20 ,60 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MagnetRise", new int[]{4,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MagneticFlux", new int[]{4,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Magnitude", new int[]{11,0 ,30 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MaliciousMoonsault", new int[]{2,0 ,1 ,180 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MatBlock", new int[]{6,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MeFirst", new int[]{13,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MeanLook", new int[]{13,-1 ,5 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Meditate", new int[]{15,-1 ,40 ,-99 ,-99 ,0 ,-1 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MegaDrain", new int[]{10,1 ,10 ,75 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MegaKick", new int[]{13,0 ,5 ,120 ,75 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MegaPunch", new int[]{13,0 ,20 ,80 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Megahorn", new int[]{1,0 ,10 ,120 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Memento", new int[]{2,-1 ,10 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,257 ,0 ,257 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MenacingMoonrazeMaelstrom", new int[]{9,1 ,1 ,200 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MetalBurst", new int[]{17,0 ,10 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MetalClaw", new int[]{17,0 ,35 ,50 ,95 ,0 ,-10 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MetalSound", new int[]{17,-1 ,40 ,-99 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,257 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MeteorMash", new int[]{17,0 ,10 ,90 ,90 ,0 ,-20 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Metronome", new int[]{13,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MilkDrink", new int[]{13,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Mimic", new int[]{13,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MindBlown", new int[]{7,1 ,5 ,150 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MindReader", new int[]{13,-1 ,5 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Minimize", new int[]{13,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MiracleEye", new int[]{15,-1 ,40 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MirrorCoat", new int[]{15,1 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MirrorMove", new int[]{8,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MirrorShot", new int[]{17,1 ,10 ,65 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Mist", new int[]{12,-1 ,30 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MistBall", new int[]{15,1 ,5 ,70 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,50 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MistyTerrain", new int[]{5,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Moonblast", new int[]{5,1 ,15 ,95 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,30 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MoongeistBeam", new int[]{9,1 ,5 ,100 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Moonlight", new int[]{5,-1 ,5 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MorningSun", new int[]{13,-1 ,5 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MudBomb", new int[]{11,1 ,10 ,65 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MudShot", new int[]{11,1 ,15 ,55 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,100 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MudSport", new int[]{11,-1 ,15 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Mud-Slap", new int[]{11,1 ,10 ,20 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MuddyWater", new int[]{18,1 ,10 ,90 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Multi-Attack", new int[]{13,0 ,10 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("MysticalFire", new int[]{7,1 ,10 ,75 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("NastyPlot", new int[]{2,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,-2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("NaturalGift", new int[]{13,0 ,15 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("NaturePower", new int[]{13,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Nature'sMadness", new int[]{5,1 ,10 ,-99 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("NeedleArm", new int[]{10,0 ,15 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Never-EndingNightmare", new int[]{9,0 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Never-EndingNightmare", new int[]{9,1 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("nfernoOverdrive", new int[]{7,0 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("nfernoOverdrive", new int[]{7,1 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("nfestation", new int[]{1,1 ,20 ,20 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("NightDaze", new int[]{2,1 ,10 ,85 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("NightShade", new int[]{9,1 ,15 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("NightSlash", new int[]{2,0 ,15 ,70 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Nightmare", new int[]{9,-1 ,15 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("NobleRoar", new int[]{13,-1 ,30 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,100 ,0 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("nstruct", new int[]{15,-1 ,15 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Nuzzle", new int[]{4,0 ,20 ,20 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,100 ,0 ,0 ,0 ,1 });
	map.put("OblivionWing", new int[]{8,1 ,10 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("OceanicOperetta", new int[]{18,1 ,1 ,195 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Octazooka", new int[]{18,1 ,10 ,65 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("OdorSleuth", new int[]{13,-1 ,40 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("OminousWind", new int[]{9,1 ,5 ,60 ,100 ,0 ,-10 , -10 ,-10 ,-10 ,-10 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("OriginPulse", new int[]{18,1 ,10 ,110 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Outrage", new int[]{3,0 ,10 ,120 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Overheat", new int[]{7,1 ,5 ,130 ,90 ,0 ,0 , 0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PainSplit", new int[]{13,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ParabolicCharge4", new int[]{1,20 ,65 ,100 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,1 ,1 });
	map.put("PartingShot", new int[]{2,-1 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,100 ,0 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PayDay", new int[]{13,0 ,20 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Payback", new int[]{2,0 ,10 ,50 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Peck", new int[]{8,0 ,35 ,35 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PerishSong", new int[]{13,-1 ,5 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PetalBlizzard", new int[]{10,0 ,15 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PetalDance", new int[]{10,1 ,10 ,120 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PhantomForce", new int[]{9,0 ,10 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PhotonGeyser", new int[]{15,1 ,5 ,100 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PikaPapow", new int[]{4,1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PinMissile", new int[]{1,0 ,20 ,25 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PlasmaFists", new int[]{4,0 ,15 ,100 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PlayNice", new int[]{13,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,100 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PlayRough", new int[]{5,0 ,10 ,90 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,10 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Pluck", new int[]{8,0 ,20 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PoisonFang", new int[]{14,0 ,15 ,50 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 50 ,0 ,0 ,0 ,0 ,1 });
	map.put("PoisonGas", new int[]{14,-1 ,40 ,-99 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 100 ,0 ,0 ,0 ,0 ,1 });
	map.put("PoisonJab", new int[]{14,0 ,20 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 30 ,0 ,0 ,0 ,0 ,1 });
	map.put("PoisonPowder", new int[]{14,-1 ,35 ,-99 ,75 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 100 ,0 ,0 ,0 ,0 ,1 });
	map.put("PoisonSting", new int[]{14,0 ,35 ,15 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PoisonTail", new int[]{14,0 ,25 ,50 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 10 ,0 ,0 ,0 ,0 ,1 });
	map.put("PollenPuff", new int[]{1,1 ,15 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Pound", new int[]{13,0 ,35 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Powder", new int[]{1,-1 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PowderSnow", new int[]{12,1 ,25 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,10 ,0 ,1 });
	map.put("PowerGem", new int[]{16,1 ,20 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PowerSplit", new int[]{15,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PowerSwap", new int[]{15,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PowerTrick", new int[]{15,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PowerTrip", new int[]{2,0 ,10 ,20 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PowerWhip", new int[]{10,0 ,10 ,120 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Power-UpPunch", new int[]{6,0 ,20 ,40 ,100 ,0 ,-1 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PrecipiceBlades11", new int[]{0,10 ,120 ,85 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,1 ,1 });
	map.put("Present", new int[]{13,0 ,15 ,-99 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PrismaticLaser", new int[]{15,1 ,10 ,160 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Protect", new int[]{13,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Psybeam", new int[]{15,1 ,20 ,65 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PsychUp", new int[]{13,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Psychic", new int[]{15,1 ,10 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,10 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PsychicFangs", new int[]{15,0 ,10 ,85 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PsychicTerrain", new int[]{15,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PsychoBoost", new int[]{15,1 ,5 ,140 ,90 ,0 ,0 , 0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PsychoCut", new int[]{15,0 ,20 ,70 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PsychoShift", new int[]{15,-1 ,10 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Psyshock", new int[]{15,1 ,10 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Psystrike", new int[]{15,1 ,10 ,100 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Psywave", new int[]{15,1 ,15 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("PulverizingPancake", new int[]{13,0 ,1 ,210 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Punishment", new int[]{2,0 ,5 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Purify", new int[]{14,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Pursuit", new int[]{2,0 ,20 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Quash", new int[]{2,-1 ,15 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("QuickAttack", new int[]{13,0 ,30 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("QuickGuard", new int[]{6,-1 ,15 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("QuiverDance", new int[]{1,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,-1 ,-1 ,-1 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Rage", new int[]{13,0 ,20 ,20 ,100 ,0 ,-1 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("RagePowder", new int[]{1,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("RainDance", new int[]{18,-1 ,5 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("RapidSpin", new int[]{13,0 ,40 ,20 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("RazorLeaf", new int[]{10,0 ,25 ,55 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("RazorShell", new int[]{18,0 ,10 ,75 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,50 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("RazorWind", new int[]{13,1 ,10 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Recover", new int[]{13,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Recycle", new int[]{13,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Reflect", new int[]{15,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ReflectType", new int[]{13,-1 ,15 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Refresh", new int[]{13,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("RelicSong", new int[]{13,1 ,10 ,75 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,100 ,1 });
	map.put("Rest", new int[]{15,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,-100 ,1 });
	map.put("Retaliate", new int[]{13,0 ,5 ,70 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Return", new int[]{13,0 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("RevelationDance", new int[]{13,1 ,15 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Revenge", new int[]{6,0 ,10 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Reversal", new int[]{6,0 ,15 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Roar", new int[]{13,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("RoarofTime", new int[]{3,1 ,5 ,150 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("RockBlast", new int[]{16,0 ,10 ,25 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("RockClimb", new int[]{13,0 ,20 ,90 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("RockPolish", new int[]{16,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,-2 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("RockSlide", new int[]{16,0 ,10 ,75 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("RockSmash", new int[]{6,0 ,15 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,50 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("RockThrow", new int[]{16,0 ,15 ,50 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("RockTomb", new int[]{16,0 ,15 ,60 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,100 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("RockWrecker", new int[]{16,0 ,5 ,150 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("RolePlay", new int[]{15,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("RollingKick", new int[]{6,0 ,15 ,60 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Rollout", new int[]{16,0 ,20 ,30 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Roost", new int[]{8,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Rototiller", new int[]{11,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Round", new int[]{13,1 ,15 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SacredFire", new int[]{7,0 ,5 ,100 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,50 ,0 ,0 ,1 });
	map.put("SacredSword", new int[]{6,0 ,15 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Safeguard", new int[]{13,-1 ,25 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SandAttack", new int[]{11,-1 ,15 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SandTomb", new int[]{11,0 ,15 ,35 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Sandstorm", new int[]{16,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SappySeed", new int[]{10,0 ,15 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SavageSpin-Out", new int[]{1,0 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SavageSpin-Out", new int[]{1,1 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Scald", new int[]{18,1 ,15 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,30 ,0 ,0 ,1 });
	map.put("ScaryFace", new int[]{13,-1 ,10 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,257 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Scratch", new int[]{13,0 ,35 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Screech", new int[]{13,-1 ,40 ,-99 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,257 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SearingShot", new int[]{7,1 ,5 ,100 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,30 ,0 ,0 ,1 });
	map.put("SearingSunrazeSmash", new int[]{17,1 ,1 ,200 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SecretPower", new int[]{13,0 ,20 ,70 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SecretSword", new int[]{6,1 ,10 ,85 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SeedBomb", new int[]{10,0 ,15 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SeedFlare", new int[]{10,1 ,5 ,120 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,40 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SeismicToss", new int[]{6,0 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Self-Destruct", new int[]{13,0 ,5 ,200 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ShadowBall", new int[]{9,1 ,15 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,20 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ShadowBone", new int[]{9,0 ,10 ,85 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,20 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ShadowClaw", new int[]{9,0 ,15 ,70 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ShadowForce", new int[]{9,0 ,5 ,120 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ShadowPunch", new int[]{9,0 ,20 ,60 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ShadowSneak", new int[]{9,0 ,30 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Sharpen", new int[]{13,-1 ,30 ,-99 ,-99 ,0 ,-1 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ShatteredPsyche", new int[]{15,0 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ShatteredPsyche", new int[]{15,1 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SheerCold", new int[]{12,1 ,5 ,2147483647 ,20 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ShellSmash", new int[]{13,-1 ,15 ,-99 ,-99 ,0 ,-2 , 1 ,-2 ,1 ,-2 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ShellTrap", new int[]{7,1 ,5 ,150 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ShiftGear", new int[]{17,-1 ,10 ,-99 ,-99 ,0 ,-1 , 0 ,0 ,0 ,-1 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ShockWave", new int[]{4,1 ,20 ,60 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ShoreUp", new int[]{11,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SignalBeam", new int[]{1,1 ,15 ,75 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SilverWind", new int[]{1,1 ,5 ,60 ,100 ,0 ,-10 , -10 ,-10 ,-10 ,-10 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SimpleBeam", new int[]{13,-1 ,15 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Sing", new int[]{13,-1 ,15 ,-99 ,55 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,100 ,1 });
	map.put("SinisterArrowRaid", new int[]{9,0 ,1 ,180 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SizzlySlide", new int[]{7,0 ,15 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,100 ,0 ,0 ,1 });
	map.put("Sketch", new int[]{13,-1 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SkillSwap", new int[]{15,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SkullBash", new int[]{13,0 ,10 ,130 ,100 ,0 ,0 , -1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SkyAttack", new int[]{8,0 ,5 ,200 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SkyDrop", new int[]{8,0 ,10 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SkyUppercut", new int[]{6,0 ,15 ,85 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SlackOff", new int[]{13,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Slam", new int[]{13,0 ,20 ,80 ,75 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Slash", new int[]{13,0 ,20 ,70 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SleepPowder", new int[]{10,-1 ,15 ,-99 ,75 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,100 ,1 });
	map.put("SleepTalk", new int[]{13,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Sludge", new int[]{14,1 ,20 ,65 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 40 ,0 ,0 ,0 ,0 ,1 });
	map.put("SludgeBomb", new int[]{14,1 ,10 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 30 ,0 ,0 ,0 ,0 ,1 });
	map.put("SludgeWave", new int[]{14,1 ,10 ,95 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 10 ,0 ,0 ,0 ,0 ,1 });
	map.put("SmackDown", new int[]{16,0 ,15 ,50 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SmartStrike", new int[]{17,0 ,10 ,70 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SmellingSalts", new int[]{13,0 ,10 ,70 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Smog", new int[]{14,1 ,20 ,30 ,70 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 40 ,0 ,0 ,0 ,0 ,1 });
	map.put("Smokescreen", new int[]{13,-1 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Snarl", new int[]{2,1 ,15 ,55 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Snatch", new int[]{2,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Snore", new int[]{13,1 ,15 ,50 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Soak", new int[]{18,-1 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Soft-Boiled", new int[]{13,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SolarBeam", new int[]{10,1 ,10 ,200 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SolarBlade", new int[]{10,0 ,10 ,125 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SonicBoom", new int[]{13,1 ,20 ,90 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,1 ,1 });
	map.put("Soul-Stealing7-StarStrike", new int[]{9,0 ,1 ,195 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SpacialRend", new int[]{3,1 ,5 ,100 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Spark", new int[]{4,0 ,20 ,65 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,30 ,0 ,0 ,0 ,1 });
	map.put("SparklingAria", new int[]{18,1 ,10 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SparklySwirl", new int[]{5,1 ,15 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SpectralThief", new int[]{9,0 ,10 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SpeedSwap", new int[]{15,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SpiderWeb", new int[]{1,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SpikeCannon", new int[]{13,0 ,15 ,20 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Spikes", new int[]{11,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,2 });
	map.put("SpikyShield", new int[]{10,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SpiritShackle", new int[]{9,0 ,10 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SpitUp", new int[]{13,1 ,10 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Spite", new int[]{9,-1 ,10 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Splash", new int[]{13,-1 ,40 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SplinteredStormshards", new int[]{16,0 ,1 ,190 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SplishySplash", new int[]{18,1 ,15 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,30 ,0 ,0 ,0 ,1 });
	map.put("Spore", new int[]{10,-1 ,15 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,100 ,1 });
	map.put("Spotlight", new int[]{13,-1 ,15 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("StealthRock", new int[]{16,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,4 });
	map.put("SteamEruption", new int[]{18,1 ,5 ,110 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,30 ,0 ,0 ,1 });
	map.put("Steamroller", new int[]{1,0 ,20 ,65 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SteelWing", new int[]{17,0 ,25 ,70 ,90 ,0 ,0 , -10 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("StickyWeb", new int[]{1,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,5 });
	map.put("Stockpile", new int[]{13,-1 ,20 ,-99 ,-99 ,0 ,0 , -1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("StokedSparksurfer", new int[]{4,1 ,1 ,175 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Stomp", new int[]{13,0 ,20 ,65 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("StompingTantrum", new int[]{11,0 ,10 ,75 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("StoneEdge", new int[]{16,0 ,5 ,100 ,80 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("StoredPower", new int[]{15,1 ,10 ,20 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("StormThrow", new int[]{6,0 ,10 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Strength", new int[]{13,0 ,15 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("StrengthSap", new int[]{10,-1 ,10 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,100 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("StringShot", new int[]{1,-1 ,40 ,-99 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,100 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Struggle", new int[]{13,0 ,1 ,50 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("StruggleBug", new int[]{1,1 ,20 ,50 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("StunSpore", new int[]{10,-1 ,30 ,-99 ,75 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,100 ,0 ,0 ,0 ,1 });
	map.put("Submission", new int[]{6,0 ,20 ,80 ,80 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Substitute", new int[]{13,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SubzeroSlammer", new int[]{12,0 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SubzeroSlammer", new int[]{12,1 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SuckerPunch", new int[]{2,0 ,5 ,70 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SunnyDay", new int[]{7,-1 ,5 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SunsteelStrike", new int[]{17,0 ,5 ,100 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SuperFang", new int[]{13,0 ,10 ,-99 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Superpower", new int[]{6,0 ,5 ,120 ,100 ,0 ,1 , 1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Supersonic", new int[]{13,-1 ,20 ,-99 ,55 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SupersonicSkystrike", new int[]{8,0 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SupersonicSkystrike", new int[]{8,1 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Surf", new int[]{18,1 ,15 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Swagger", new int[]{13,-1 ,15 ,-99 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,-257 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Swallow", new int[]{13,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SweetKiss", new int[]{5,-1 ,10 ,-99 ,75 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SweetScent", new int[]{13,-1 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Swift", new int[]{13,1 ,20 ,60 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Switcheroo", new int[]{2,-1 ,10 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,10 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("SwordsDance", new int[]{13,-1 ,20 ,-99 ,-99 ,0 ,-2 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Synchronoise", new int[]{15,1 ,10 ,120 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Synthesis", new int[]{10,-1 ,5 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Tackle", new int[]{13,0 ,35 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("TailGlow", new int[]{1,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,-2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("TailSlap", new int[]{13,0 ,10 ,25 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("TailWhip", new int[]{13,-1 ,30 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,100 ,0 ,0 ,0 , 30 ,0 ,0 ,0 ,0 ,1 });
	map.put("Tailwind", new int[]{8,-1 ,15 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("TakeDown", new int[]{13,0 ,20 ,90 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Taunt", new int[]{2,-1 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("TearfulLook", new int[]{13,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,100 ,0 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("TechnoBlast", new int[]{13,1 ,5 ,120 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("TectonicRage", new int[]{11,0 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("TectonicRage", new int[]{11,1 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("TeeterDance", new int[]{13,-1 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Telekinesis", new int[]{15,-1 ,15 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Teleport", new int[]{15,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Thief", new int[]{2,0 ,25 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ThousandArrows", new int[]{11,0 ,10 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ThousandWaves", new int[]{11,0 ,10 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Thrash", new int[]{13,0 ,10 ,120 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ThroatChop", new int[]{2,0 ,15 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Thunder", new int[]{4,1 ,10 ,110 ,70 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,10 ,0 ,0 ,0 ,1 });
	map.put("ThunderFang", new int[]{4,0 ,15 ,65 ,95 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,10 ,0 ,0 ,0 ,1 });
	map.put("ThunderPunch", new int[]{4,0 ,15 ,75 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,10 ,0 ,0 ,0 ,1 });
	map.put("ThunderShock", new int[]{4,1 ,30 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,10 ,0 ,0 ,0 ,1 });
	map.put("ThunderWave", new int[]{4,-1 ,20 ,-99 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,100 ,0 ,0 ,0 ,1 });
	map.put("Thunderbolt", new int[]{4,1 ,15 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,10 ,0 ,0 ,0 ,1 });
	map.put("Tickle", new int[]{13,-1 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,100 ,100 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Topsy-Turvy", new int[]{2,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Torment", new int[]{2,-1 ,15 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Toxic", new int[]{14,-1 ,10 ,-99 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 100 ,0 ,0 ,0 ,0 ,1 });
	map.put("ToxicSpikes", new int[]{14,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,3 });
	map.put("ToxicThread", new int[]{14,-1 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,100 , 100 ,0 ,0 ,0 ,0 ,1 });
	map.put("Transform", new int[]{13,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("TriAttack", new int[]{13,1 ,10 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,20 ,20 ,20 ,0 ,1 });
	map.put("Trick", new int[]{15,-1 ,10 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("TrickRoom", new int[]{15,-1 ,5 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Trick-or-Treat", new int[]{9,-1 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("TripleKick", new int[]{6,0 ,10 ,10 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("TropKick", new int[]{10,0 ,15 ,70 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,100 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("TrumpCard", new int[]{13,1 ,5 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Twineedle", new int[]{1,0 ,20 ,25 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 20 ,0 ,0 ,0 ,0 ,1 });
	map.put("TwinkleTackle", new int[]{5,0 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("TwinkleTackle", new int[]{5,1 ,1 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Twister", new int[]{3,1 ,20 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("U-turn", new int[]{1,0 ,20 ,70 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Uproar", new int[]{13,1 ,10 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("V-create", new int[]{7,0 ,5 ,180 ,95 ,0 ,0 , 1 ,0 ,1 ,1 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("VacuumWave", new int[]{6,1 ,30 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("VenomDrench", new int[]{14,-1 ,20 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,100 ,0 ,100 ,0 ,100 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Venoshock", new int[]{14,1 ,10 ,65 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ViceGrip", new int[]{13,0 ,30 ,55 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("VineWhip", new int[]{10,0 ,25 ,45 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("VoltSwitch", new int[]{4,1 ,20 ,70 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,10 ,0 ,0 ,0 ,1 });
	map.put("VoltTackle", new int[]{4,0 ,15 ,120 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Wake-UpSlap", new int[]{6,0 ,10 ,70 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("waterGun", new int[]{18,1 ,25 ,40 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("WaterPledge", new int[]{18,1 ,10 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("WaterPulse", new int[]{18,1 ,20 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("WaterShuriken", new int[]{18,1 ,20 ,15 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("WaterSport", new int[]{18,-1 ,15 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("WaterSpout", new int[]{18,1 ,5 ,150 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Waterfall", new int[]{18,0 ,15 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("WeatherBall", new int[]{13,1 ,10 ,50 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Whirlpool", new int[]{18,1 ,15 ,35 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Whirlwind", new int[]{13,-1 ,20 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("WideGuard", new int[]{16,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("WildCharge", new int[]{4,0 ,15 ,90 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Will-O-Wisp", new int[]{7,-1 ,15 ,-99 ,85 ,0 ,0 , 0 ,0 ,0 ,0 ,100 ,0 ,0 ,0 ,0 , 0 ,0 ,100 ,0 ,0 ,1 });
	map.put("WingAttack", new int[]{8,0 ,35 ,60 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Wish", new int[]{13,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Withdraw", new int[]{18,-1 ,40 ,-99 ,-99 ,0 ,0 , -1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("WonderRoom", new int[]{15,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("WoodHammer", new int[]{10,0 ,15 ,120 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("WorkUp", new int[]{13,-1 ,30 ,-99 ,-99 ,0 ,-1 , 0 ,-1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("WorrySeed", new int[]{10,-1 ,10 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Wrap", new int[]{13,0 ,20 ,15 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("WringOut", new int[]{13,1 ,5 ,-99 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("X-Scissor", new int[]{1,0 ,15 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("Yawn", new int[]{13,-1 ,10 ,-99 ,-99 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,100 ,1 });
	map.put("ZapCannon", new int[]{4,1 ,5 ,120 ,50 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,100 ,0 ,0 ,0 ,1 });
	map.put("ZenHeadbutt", new int[]{15,0 ,15 ,80 ,90 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ZingZap", new int[]{4,0 ,10 ,80 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });
	map.put("ZippyZap", new int[]{4,0 ,15 ,50 ,100 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 ,1 });

	 if (map.containsKey(key)) { 
         p = map.get(key);
     } 
	 return p;
	}
	public static double getMod(int[] move) {
		// crit * random(0.85-1) * STAB * type effectiveness
		double mod = 1;
		Random x = new Random();
		if (x.nextInt(100) < 13) {// crit
			mod = mod * 1.5;
		}


		
		double rando = (x.nextInt(15) + 85); //random mod
		rando = rando / 100;
		mod = mod * rando;

		
		
		if (move[0] == BattleFrame.player.getType1() || move[0] == BattleFrame.player.getType2()) {
			mod = mod * 1.5;
		}

		double typeMod = typeEffectiveness(move);
		mod = mod * typeMod;
 
		return mod;
	}

	public static double typeEffectiveness(int[] move) {
		double TypeMod = 1;

		if (move[0] == 1) {// move[0]s Bug
			if (BattleFrame.opponent.getType1() == 10 || BattleFrame.opponent.getType2() == 10 || BattleFrame.opponent.getType1() == 15 || BattleFrame.opponent.getType2() == 15 || BattleFrame.opponent.getType1() == 2 || BattleFrame.opponent.getType2() == 2) {
				TypeMod *= 2;
			}
			if (BattleFrame.opponent.getType1() == 7 || BattleFrame.opponent.getType2() == 7 || BattleFrame.opponent.getType1() == 6 || BattleFrame.opponent.getType2() == 6 || BattleFrame.opponent.getType1() == 14 || BattleFrame.opponent.getType2() == 14 || BattleFrame.opponent.getType1() == 8|| BattleFrame.opponent.getType2() == 8 || BattleFrame.opponent.getType1() == 9 || BattleFrame.opponent.getType2() == 9 || BattleFrame.opponent.getType1() == 17 || BattleFrame.opponent.getType2() == 17 || BattleFrame.opponent.getType1() == 5|| BattleFrame.opponent.getType2() == 5) {
				TypeMod *= 0.5;
			}
		}

		if (move[0] == 2) {// dark
			if (BattleFrame.opponent.getType1() == 15 || BattleFrame.opponent.getType2() == 15 || BattleFrame.opponent.getType1() == 9 || BattleFrame.opponent.getType2() == 9) {
				TypeMod *= 2;
			}
			if (BattleFrame.opponent.getType1() == 6 || BattleFrame.opponent.getType2() == 6 || BattleFrame.opponent.getType1() == 2 || BattleFrame.opponent.getType2() == 2 || BattleFrame.opponent.getType1() == 5 || BattleFrame.opponent.getType2() == 5) {
				TypeMod *= 0.5;
			}
		}

		if (move[0] == 3) {// dragon
			if (BattleFrame.opponent.getType1() == 3 || BattleFrame.opponent.getType2() == 3) {
				TypeMod *= 2;
			}
			if (BattleFrame.opponent.getType1() == 17 || BattleFrame.opponent.getType2() == 17) {
				TypeMod *= 0.5;
			}
			if (BattleFrame.opponent.getType1() == 5 || BattleFrame.opponent.getType2() == 5) {
				return 0;
			}
		}

		if (move[0] == 4) {// electric******************************
			if (BattleFrame.opponent.getType1() == 18 || BattleFrame.opponent.getType2() == 18 || BattleFrame.opponent.getType1() == 8 || BattleFrame.opponent.getType2() == 8) {
				TypeMod *= 2;
			}
			if (BattleFrame.opponent.getType1() == 4 || BattleFrame.opponent.getType2() == 4 || BattleFrame.opponent.getType1() == 10 || BattleFrame.opponent.getType2() == 10 || BattleFrame.opponent.getType1() == 3 || BattleFrame.opponent.getType2() == 3) {
				TypeMod *= 0.5;
			}
			if (BattleFrame.opponent.getType1() == 11 || BattleFrame.opponent.getType2() == 11) {
				return 0;
			}
		}

		if (move[0] == 5) {// fairy
			if (BattleFrame.opponent.getType1() == 6 || BattleFrame.opponent.getType2() == 6 || BattleFrame.opponent.getType1() == 2 || BattleFrame.opponent.getType2() == 2 || BattleFrame.opponent.getType1() == 3 || BattleFrame.opponent.getType2() == 3) {
				TypeMod *= 2;
			}
			if (BattleFrame.opponent.getType1() == 7 || BattleFrame.opponent.getType2() == 7 || BattleFrame.opponent.getType1() == 14 || BattleFrame.opponent.getType2() == 14 || BattleFrame.opponent.getType1() == 17 || BattleFrame.opponent.getType2() == 17) {
				TypeMod *= 0.5;
			}
		}

		if (move[0] == 6) {// fighting**********************
			if (BattleFrame.opponent.getType1() == 13 || BattleFrame.opponent.getType2() == 13 || BattleFrame.opponent.getType1() == 12 || BattleFrame.opponent.getType2() == 12 || BattleFrame.opponent.getType1() == 16 || BattleFrame.opponent.getType2() == 16|| BattleFrame.opponent.getType1() == 2 || BattleFrame.opponent.getType2() == 2 || BattleFrame.opponent.getType1() == 17 || BattleFrame.opponent.getType2() == 17) {
				TypeMod *= 2;
			}
			if (BattleFrame.opponent.getType1() == 14 || BattleFrame.opponent.getType2() == 14 || BattleFrame.opponent.getType1() == 8 || BattleFrame.opponent.getType2() == 8 || BattleFrame.opponent.getType1() == 15 || BattleFrame.opponent.getType2() == 15|| BattleFrame.opponent.getType1() == 1 || BattleFrame.opponent.getType2() == 1 || BattleFrame.opponent.getType1() == 5 || BattleFrame.opponent.getType2() == 5) {
				TypeMod *= 0.5;
			}
			if (BattleFrame.opponent.getType1() == 9 || BattleFrame.opponent.getType2() == 9) {
				return 0;
			}
		}

		if (move[0] == 7) {// fire
			if (BattleFrame.opponent.getType1() == 10 || BattleFrame.opponent.getType2() == 10 || BattleFrame.opponent.getType1() == 12 || BattleFrame.opponent.getType2() == 12 || BattleFrame.opponent.getType1() == 1 || BattleFrame.opponent.getType2() == 1|| BattleFrame.opponent.getType1() == 17 || BattleFrame.opponent.getType2() == 17) {
				TypeMod *= 2;
			}
			if (BattleFrame.opponent.getType1() == 7 || BattleFrame.opponent.getType2() == 7 || BattleFrame.opponent.getType1() == 18 || BattleFrame.opponent.getType2() == 18 || BattleFrame.opponent.getType1() == 16 || BattleFrame.opponent.getType2() == 16|| BattleFrame.opponent.getType1() == 3 || BattleFrame.opponent.getType2() == 3) {
				TypeMod *= 0.5;
			}
		}

		if (move[0] == 8) {// flying
			if (BattleFrame.opponent.getType1() == 10 || BattleFrame.opponent.getType2() == 10 || BattleFrame.opponent.getType1() == 6 || BattleFrame.opponent.getType2() == 6 || BattleFrame.opponent.getType1() == 1 || BattleFrame.opponent.getType2() == 1) {
				TypeMod *= 2;
			}
			if (BattleFrame.opponent.getType1() == 4 || BattleFrame.opponent.getType2() == 4 || BattleFrame.opponent.getType1() == 16 || BattleFrame.opponent.getType2() == 16 || BattleFrame.opponent.getType1() == 17 || BattleFrame.opponent.getType2() == 17) {
				TypeMod *= 0.5;
			}
		}

		if (move[0] == 9) {// ghost
			if (BattleFrame.opponent.getType1() == 15 || BattleFrame.opponent.getType2() == 15 || BattleFrame.opponent.getType1() == 9 || BattleFrame.opponent.getType2() == 9) {
				TypeMod *= 2;
			}
			if (BattleFrame.opponent.getType1() == 2 || BattleFrame.opponent.getType2() == 2) {
				TypeMod *= 0.5;
			}
			if (BattleFrame.opponent.getType1() == 13 || BattleFrame.opponent.getType2() == 13) {
				return 0;
			}
		}

		if (move[0] == 10) {// grass******************************
			if (BattleFrame.opponent.getType1() == 18 || BattleFrame.opponent.getType2() == 18 || BattleFrame.opponent.getType1() == 11 || BattleFrame.opponent.getType2() == 11 || BattleFrame.opponent.getType1() == 16 || BattleFrame.opponent.getType2() == 16) {
				TypeMod *= 2;
			}
			if (BattleFrame.opponent.getType1() == 7 || BattleFrame.opponent.getType2() == 7 || BattleFrame.opponent.getType1() == 10 || BattleFrame.opponent.getType2() == 10 || BattleFrame.opponent.getType1() == 14 || BattleFrame.opponent.getType2() == 14|| BattleFrame.opponent.getType1() == 8 || BattleFrame.opponent.getType2() == 8 || BattleFrame.opponent.getType1() == 1 || BattleFrame.opponent.getType2() == 1 || BattleFrame.opponent.getType1() == 3 || BattleFrame.opponent.getType2() == 3|| BattleFrame.opponent.getType1() == 17 || BattleFrame.opponent.getType2() == 17) {
				TypeMod *= 0.5;
			}
		}

		if (move[0] == 11) {// ground******************************
			if (BattleFrame.opponent.getType1() == 7 || BattleFrame.opponent.getType2() == 7 || BattleFrame.opponent.getType1() == 4 || BattleFrame.opponent.getType2() == 4 || BattleFrame.opponent.getType1() == 14 || BattleFrame.opponent.getType2() == 14 || BattleFrame.opponent.getType1() == 16|| BattleFrame.opponent.getType2() == 16 || BattleFrame.opponent.getType1() == 17 || BattleFrame.opponent.getType2() == 17) {
				TypeMod *= 2;
			}
			if (BattleFrame.opponent.getType1() == 10 || BattleFrame.opponent.getType2() == 10 || BattleFrame.opponent.getType1() == 1 || BattleFrame.opponent.getType2() == 1) {
				TypeMod *= 0.5;
			}
			if (BattleFrame.opponent.getType1() == 8 || BattleFrame.opponent.getType2() == 8) {
				return 0;
			}
		}

		if (move[0] == 12) {// ice
			if (BattleFrame.opponent.getType1() == 10 || BattleFrame.opponent.getType2() == 10 || BattleFrame.opponent.getType1() == 11 || BattleFrame.opponent.getType2() == 11 || BattleFrame.opponent.getType1() == 8 || BattleFrame.opponent.getType2() == 8|| BattleFrame.opponent.getType1() == 3 || BattleFrame.opponent.getType2() == 3) {
				TypeMod *= 2;
			}
			if (BattleFrame.opponent.getType1() == 7 || BattleFrame.opponent.getType2() == 7 || BattleFrame.opponent.getType1() == 18 || BattleFrame.opponent.getType2() == 18 || BattleFrame.opponent.getType1() == 12 || BattleFrame.opponent.getType2() == 12|| BattleFrame.opponent.getType1() == 17 || BattleFrame.opponent.getType2() == 17) {
				TypeMod *= 0.5;
			}
		}

		if (move[0] == 13) {// normal*************************

			if (BattleFrame.opponent.getType1() == 16 || BattleFrame.opponent.getType2() == 16 || BattleFrame.opponent.getType1() == 17 || BattleFrame.opponent.getType2() == 17) {
				TypeMod *= 0.5;
			}
			if (BattleFrame.opponent.getType1() == 9 || BattleFrame.opponent.getType2() == 9) {
				return 0;
			}
		}

		if (move[0] == 14) {// poison
			if (BattleFrame.opponent.getType1() == 10 || BattleFrame.opponent.getType2() == 10 || BattleFrame.opponent.getType1() == 5 || BattleFrame.opponent.getType2() == 5) {
				TypeMod *= 2;
			}
			if (BattleFrame.opponent.getType1() == 14 || BattleFrame.opponent.getType2() == 14 || BattleFrame.opponent.getType1() == 11 || BattleFrame.opponent.getType2() == 11 || BattleFrame.opponent.getType1() == 16 || BattleFrame.opponent.getType2() == 16|| BattleFrame.opponent.getType1() == 9 || BattleFrame.opponent.getType2() == 9) {
				TypeMod *= 0.5;
			}
			if (BattleFrame.opponent.getType1() == 17 || BattleFrame.opponent.getType2() == 17) {
				return 0;
			}
		}

		if (move[0] == 15) {// psychic
			if (BattleFrame.opponent.getType1() == 6 || BattleFrame.opponent.getType2() == 6 || BattleFrame.opponent.getType1() == 14 || BattleFrame.opponent.getType2() == 14) {
				TypeMod *= 2;
			}
			if (BattleFrame.opponent.getType1() == 15 || BattleFrame.opponent.getType2() == 15 || BattleFrame.opponent.getType1() == 17 || BattleFrame.opponent.getType2() == 17) {
				TypeMod *= 0.5;
			}
			if (BattleFrame.opponent.getType1() == 2 || BattleFrame.opponent.getType2() == 2) {
				return 0;
			}
		}

		if (move[0] == 16) {// rock
			if (BattleFrame.opponent.getType1() == 7 || BattleFrame.opponent.getType2() == 7 || BattleFrame.opponent.getType1() == 12 || BattleFrame.opponent.getType2() == 12 || BattleFrame.opponent.getType1() == 8 || BattleFrame.opponent.getType2() == 8 || BattleFrame.opponent.getType1() == 1|| BattleFrame.opponent.getType2() == 1) {
				TypeMod *= 2;
			}
			if (BattleFrame.opponent.getType1() == 6 || BattleFrame.opponent.getType2() == 6 || BattleFrame.opponent.getType1() == 11 || BattleFrame.opponent.getType2() == 11 || BattleFrame.opponent.getType1() == 17 || BattleFrame.opponent.getType2() == 17) {
				TypeMod *= 0.5;
			}
		}

		if (move[0] == 17) {// steel
			if (BattleFrame.opponent.getType1() == 12 || BattleFrame.opponent.getType2() == 12 || BattleFrame.opponent.getType1() == 16 || BattleFrame.opponent.getType2() == 16 || BattleFrame.opponent.getType1() == 5 || BattleFrame.opponent.getType2() == 5) {
				TypeMod *= 2;
			}
			if (BattleFrame.opponent.getType1() == 7 || BattleFrame.opponent.getType2() == 7 || BattleFrame.opponent.getType1() == 18 || BattleFrame.opponent.getType2() == 18 || BattleFrame.opponent.getType1() == 4 || BattleFrame.opponent.getType2() == 4 || BattleFrame.opponent.getType1() == 17|| BattleFrame.opponent.getType2() == 17) {
				TypeMod *= 0.5;
			}
		}

		if (move[0] == 18) {// water
			if (BattleFrame.opponent.getType1() == 7 || BattleFrame.opponent.getType2() == 7 || BattleFrame.opponent.getType1() == 11 || BattleFrame.opponent.getType2() == 11 || BattleFrame.opponent.getType1() == 16 || BattleFrame.opponent.getType2() == 16) {
				TypeMod *= 2;
			}
			if (BattleFrame.opponent.getType1() == 18 || BattleFrame.opponent.getType2() == 18 || BattleFrame.opponent.getType1() == 11 || BattleFrame.opponent.getType2() == 11 || BattleFrame.opponent.getType1() == 16 || BattleFrame.opponent.getType2() == 16) {
				TypeMod *= 0.5;
			}
		}

		return TypeMod;
	}
}
